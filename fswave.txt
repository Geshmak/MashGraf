#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 FragPos;
	vec2 TexCoords;
    vec4 FragPosLightSpace;
	
	vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
} fs_in;



uniform sampler2D shadowMap;
uniform sampler2D normalMap;
uniform sampler2D HightMap;

uniform vec3 objectColor;
uniform vec3 viewPos;
uniform mat4 model;
uniform float heightScale;

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 
uniform Material material;

struct LightInfo {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    
	
	vec3 lightColor;
    vec3 lightPos; 
	
	float consta;
	float line;
    float sqrish;
	
}; 
struct LightFar {
    vec3 direction;
	vec3 lightColor;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};



#define num 1 
uniform LightInfo light[num];
uniform LightFar lightsun;

vec3 difLight(LightInfo light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 funclight(LightFar light, vec3 normal, vec3 viewDir);
vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir);

float ShadowCalculation(vec4 fragPosLightSpace,vec3 normal, vec3 lightDir )
{
	float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);  
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    float currentDepth = projCoords.z;
    
    float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0; 
	if(projCoords.z > 1.0)
        shadow = 0.0;
    return shadow;
}


void main()
{    
	
	
	vec2 texCoords = fs_in.TexCoords;
    vec3 viewDir = normalize(fs_in.TangentViewPos - fs_in.TangentFragPos);
	
	texCoords = ParallaxMapping(texCoords,  viewDir);       
    if((texCoords.x > 1.0) || (texCoords.y > 1.0) || (texCoords.x > 1.0) || (texCoords.y > 1.0))
        discard;

	vec3 normal = texture(normalMap, texCoords).rgb;
	normal = normalize(normal * 2.0 - 1.0); 
	
	
	vec3 res = vec3(0.0f);
	res += funclight(lightsun, normal, viewDir);
	for(int i = 0; i < num; i++)
        res += difLight(light[i], normal, fs_in.FragPos, viewDir);
    FragColor = vec4(res * objectColor, 1.0);
}

vec3 funclight(LightFar light, vec3 normal, vec3 viewDir)
{
   
    vec3 ambient  = vec3(0.5) *material.ambient  * light.lightColor; //ambient
	
	vec3 lightDir = normalize(fs_in.TangentLightPos - fs_in.TangentFragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse =  diff * light.lightColor * material.diffuse;
	
	vec3 reflectDir = reflect(-lightDir, normal);
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
    vec3 specular =  spec * light.lightColor * material.ambient;
	
	float shadow = ShadowCalculation(fs_in.FragPosLightSpace, normal , lightDir );
    return (ambient + (1.0 - shadow) * (diffuse + specular));
}

vec3 difLight(LightInfo light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    
    float distance    = length(light.lightPos - fragPos);
    float attenuation = 1.0 / (light.consta + light.line * distance + light.sqrish * (distance * distance));    
    
	vec3 ambient  = vec3(0.5) *material.ambient  * light.lightColor; //ambient
	
	vec3 lightDir = normalize(fs_in.TangentLightPos - fs_in.TangentFragPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse =  diff * light.lightColor * material.diffuse;
	
	vec3 reflectDir = reflect(-lightDir, normal);
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
    vec3 specular =  spec * light.lightColor * material.ambient;
	
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}  


vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir)
{ 
    const float minLayers = 2;
    const float maxLayers = 64;
    float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));  
    float layerDepth = 1.0 / numLayers;
    float currentLayerDepth = 0.0;
    
	vec2 P = viewDir.xy / viewDir.z * heightScale;
    
    vec2  currentTexCoords     = texCoords;
    float currentDepthMapValue = texture(HightMap, currentTexCoords).r;
      
    while(currentLayerDepth < currentDepthMapValue)
    {
        currentTexCoords -= P;
        currentDepthMapValue = texture(HightMap, currentTexCoords).r;  
        currentLayerDepth += layerDepth;  
    }
	P *= 0.5;
	layerDepth *= 0.5;
	currentTexCoords += P;
	currentLayerDepth -= layerDepth;
	const int _reliefSteps = 5;
	int currentStep = _reliefSteps;
	while (currentStep > 0) {
		currentDepthMapValue = texture(HightMap, currentTexCoords).r;
		P *= 0.5;
		layerDepth *= 0.5;
		if (currentDepthMapValue > currentLayerDepth) {
			currentTexCoords -= P;
			currentLayerDepth += layerDepth;
		}
		else {
			currentTexCoords += P;
			currentLayerDepth -= layerDepth;
		}
		currentStep--;
	}
	return currentTexCoords;
}


