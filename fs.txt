#version 330 core
out vec4 FragColor;

in vec3 Normal;
in vec2 TexCoord;
in vec3 FragPos;
in vec3 Color;

uniform sampler2D texture1;
uniform sampler2D texture2;

uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 lightPos; 
uniform vec3 viewPos;
uniform mat4 model;


struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 
uniform Material material;

void main()
{

    vec3 ambient = vec3(0.5) * lightColor * material.ambient;

	mat3 normalMatrix = transpose(inverse(mat3(model)));
	vec3 norm = normalize(normalMatrix*Normal);
	vec3 lightDir = normalize(lightPos - FragPos);  
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = vec3(1.0) * diff * lightColor * material.diffuse;
	
	
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0),material.shininess);
    vec3 specular = vec3(1.0) * spec * lightColor * material.ambient;
	
	FragColor =texture(texture1, TexCoord) * vec4((ambient+diffuse+specular)* Color, 1.0); ///*vec4(0.0f, 0.5f, 0.4f, 1.0f)*/
}