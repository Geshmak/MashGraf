#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
    vec4 FragPosLightSpace;
} fs_in;


uniform sampler2D texture_diffuse1;
uniform sampler2D shadowMap;


uniform vec3 objectColor;
uniform vec3 viewPos;
uniform mat4 model;


struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 
uniform Material material;

struct LightInfo {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    
	
	vec3 lightColor;
    vec3 lightPos; 
	
	float consta;
	float line;
    float sqrish;
	
}; 
struct LightFar {
    vec3 direction;
	vec3 lightColor;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};



#define num 1 
uniform LightInfo light[num];
uniform LightFar lightsun;
vec3 difLight(LightInfo light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 funclight(LightFar light, vec3 normal, vec3 viewDir);

float ShadowCalculation(vec4 fragPosLightSpace,vec3 normal, vec3 lightDir )
{
	float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);  
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;

    projCoords = projCoords * 0.5 + 0.5;  
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    float currentDepth = projCoords.z;
    float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0; 
	if(projCoords.z > 1.0)
        shadow = 0.0;
    return shadow;
}


void main()
{    
    vec3 viewDir = normalize(viewPos - fs_in.FragPos);
	vec3 res = vec3(0.0f);
	res += funclight(lightsun, fs_in.Normal, viewDir);
	for(int i = 0; i < num; i++)
        res += difLight(light[i], fs_in.Normal, fs_in.FragPos, viewDir);
    FragColor = vec4(res * objectColor, 1.0) * texture(texture_diffuse1, fs_in.TexCoords);
}

vec3 funclight(LightFar light, vec3 normal, vec3 viewDir)
{
    vec3 lightsunir = normalize(-light.direction);

    float diff = max(dot(normal, lightsunir), 0.0);
	
    vec3 reflectDir = reflect(-lightsunir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	
    vec3 ambient  =vec3(0.5) * material.ambient  * light.lightColor; //ambient
    vec3 diffuse = diff * light.lightColor * material.diffuse;
    vec3 specular =  spec * light.lightColor * material.ambient;
	float shadow = ShadowCalculation(fs_in.FragPosLightSpace, normal , lightsunir );
	
    return (ambient + (1.0 - shadow) * (diffuse + specular));
}

vec3 difLight(LightInfo light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightsunir = normalize(light.lightPos - fragPos);
    
    float distance    = length(light.lightPos - fragPos);
    float attenuation = 1.0 / (light.consta + light.line * distance + light.sqrish * (distance * distance));    
    vec3 ambient  = material.ambient  * vec3(0.1) * light.lightColor; //ambient
 
	float diff = max(dot(normal, lightsunir), 0.0);
	vec3 diffuse = vec3(1.0) * diff * light.lightColor * material.diffuse;
	
    vec3 reflectDir = reflect(-lightsunir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	
	vec3 specular = vec3(1.0) * spec * light.lightColor * material.ambient;
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
	
    return (ambient + diffuse + specular);
} 
